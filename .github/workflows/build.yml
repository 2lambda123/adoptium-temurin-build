name: Build

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build_linux:
    name: Linux
    runs-on: ubuntu-latest
    container:
      image: adoptopenjdk/centos7_build_image
    strategy:
      matrix:
        version: [jdk8u, jdk11u, jdk15u, jdk]
        vm: [hotspot, openj9]

    steps:
    - uses: actions/checkout@v2
        
    - name: Build Linux
      run: ./build-farm/make-adopt-build-farm.sh
      env:
        JAVA_TO_BUILD: ${{ matrix.version }}
        ARCHITECTURE: x64
        VARIANT: ${{ matrix.vm }}
        TARGET_OS: linux
        FILENAME: OpenJDK.tar.gz

  build_macos:
    name: macOS
    runs-on: macos-latest
    strategy:
      matrix:
        version: [jdk8u, jdk11u, jdk15u, jdk]
        vm: [hotspot, openj9]

    steps:
    - uses: actions/checkout@v2

    - name: Install Dependencies
      run: |
        brew install bash binutils freetype gnu-sed nasm

    - uses: actions/setup-java@v1
      id: setup-java
      with:
        java-version: 7
      if: matrix.version == 'jdk8u'
        
    - name: Build macOS
      run: |
        export JAVA_HOME=$JAVA_HOME_11_X64
        # Skip freetype build on jdk11+
        if [ ${{ matrix.version }} != "jdk8u" ]; then
          export BUILD_ARGS="--skip-freetype"
        fi
        ./build-farm/make-adopt-build-farm.sh
      env:
        JAVA_TO_BUILD: ${{ matrix.version }}
        ARCHITECTURE: x64
        VARIANT: ${{ matrix.vm }}
        TARGET_OS: mac
        FILENAME: OpenJDK.tar.gz
        JDK7_BOOT_DIR: ${{ steps.setup-java.outputs.path }}

  build_windows:
    name: Windows
    runs-on: windows-2016
    strategy:
      matrix:
        version: [jdk8u, jdk11u, jdk15u, jdk]
        vm: [hotspot, openj9]

    steps:
    - uses: actions/setup-java@v1
      id: setup-java
      with:
        java-version: 7
      if: matrix.version == 'jdk8u'

    - name: Install Cygwin
      run: |
        choco install cygwin -y
        choco install cyg-get -y
        cyg-get wget,bsdtar,rsync,gnupg,git,autoconf,make,gcc-core,mingw64-x86_64-gcc-core,unzip,zip,cpio,curl,grep,perl
        echo '::add-path::C:\tools\cygwin\bin;C:\cygwin\bin'

    - name: Git configuration
      run: |
        git config --global core.autocrlf false

    - name: Install Cuda
      run: |
        Invoke-WebRequest -UseBasicParsing 'https://developer.nvidia.com/compute/cuda/9.0/Prod/network_installers/cuda_9.0.176_win10_network-exe' -OutFile 'C:\temp\cuda_9.0.176_win10_network-exe.exe'
        Start-Process -Wait -FilePath 'C:\temp\cuda_9.0.176_win10_network-exe.exe' -ArgumentList '-s compiler_9.0 nvml_dev_9.0'
      if: matrix.vm == 'openj9'

    - name: Cygwin git configuration
      shell: bash
      run: mkdir $HOME && git config --global core.autocrlf false

    - uses: actions/checkout@v2

    - name: Build Windows
      run: |
        export JAVA_HOME="$JAVA_HOME_11_X64"
        ./build-farm/make-adopt-build-farm.sh
      shell: bash
      env:
        JAVA_TO_BUILD: ${{ matrix.version }}
        ARCHITECTURE: x64
        VARIANT: ${{ matrix.vm }}
        TARGET_OS: windows
        FILENAME: OpenJDK.tar.gz
        JDK7_BOOT_DIR: ${{ steps.setup-java.outputs.path }}
        BUILD_ARGS: "--skip-freetype"