name: Build

on:
  pull_request:
    branches: [ master ]

# Cancel existing runs if user makes another push.
concurrency:
  group: "${{ github.ref }}"
  cancel-in-progress: ${{ github.event_name == 'pull_request' }}

jobs:
  build_windows:
     name: Windows
     runs-on: ${{ matrix.os }}
     strategy:
       fail-fast: false
       matrix:
         os: [windows-2019]
         version: [jdk]
         variant: [temurin]

     steps:
     - name: Restore cygwin packages from cache
       id: cygwin
       uses: actions/cache@v2
       with:
        path: C:\cygwin_packages
        key: cygwin-packages-${{ runner.os }}-v1

     - name: Install Cygwin
       run: |
         New-Item -Path C:\ -Name 'openjdk' -ItemType 'directory'
         Invoke-WebRequest -UseBasicParsing 'https://cygwin.com/setup-x86_64.exe' -OutFile 'C:\temp\cygwin.exe'
         Start-Process -Wait -FilePath 'C:\temp\cygwin.exe' -ArgumentList '--packages autoconf,automake,bsdtar,cpio,curl,gcc-core,git,gnupg,grep,libtool,make,mingw64-x86_64-gcc-core,perl,rsync,unzip,wget,zip --quiet-mode --download --local-install --delete-orphans --site https://mirrors.kernel.org/sourceware/cygwin/ --local-package-dir C:\cygwin_packages --root C:\cygwin64'

     - uses: actions/setup-java@v1
       id: setup-java7
       with:
         java-version: 7
       if: matrix.version == 'jdk8u'

     - uses: actions/setup-java@v1
       id: setup-java11
       with:
         java-version: 11

     - name: Install Git
       run: |
         Invoke-WebRequest 'https://github.com/git-for-windows/git/releases/download/v2.14.3.windows.1/Git-2.14.3-64-bit.exe' -OutFile 'C:\temp\git.exe'
         Start-Process -Wait -FilePath 'C:\temp\git.exe' -ArgumentList '/SILENT /ALLOWDOWNGRADE=1** /COMPONENTS="icons,ext\reg\shellhere,assoc,assoc_sh"'

     - name: Set PATH
       run: echo "C:\cygwin64\bin;C:\Program Files\Git\bin;" | Out-File -FilePath "$env:GITHUB_PATH" -Encoding utf8 -Append

     - name: Install Visual Studio 2013
       run: |
         choco install visualstudiocommunity2013
       if: matrix.version == 'jdk8u'

     - name: Cygwin git configuration
       shell: bash
       run: mkdir "$HOME" && git config --system core.autocrlf false && git config --global --add safe.directory '*'

     - uses: actions/checkout@v3.0.2
       with:
         set-safe-directory: false

     - name: Setup 8dot3name
       run: fsutil behavior set disable8dot3 0

     - name: Set JAVA_HOME
       run: echo "JAVA_HOME=$(cygpath "${{ steps.setup-java11.outputs.path }}")" | Out-File -FilePath "$env:GITHUB_ENV" -Encoding utf8 -Append
    
     - name: Set JDK7_BOOT_DIR
       run: echo "JDK7_BOOT_DIR=$(cygpath "${{ steps.setup-java7.outputs.path }}")" | Out-File -FilePath "$env:GITHUB_ENV" -Encoding utf8 -Append
       if: matrix.version == 'jdk8u'

     - name: Debug ANT_HOME
       shell: pwsh
       run: |
        echo $ANT_HOME
        gci env:

     - name: Build Windows
       run: |
         bash build-farm/make-adopt-build-farm.sh
       shell: cmd
       env:
         JAVA_TO_BUILD: ${{ matrix.version }}
         ARCHITECTURE: x64
         VARIANT: ${{ matrix.variant }}
         TARGET_OS: windows
         FILENAME: OpenJDK.zip
         ANT_HOME: $ANT_HOME

     - uses: actions/upload-artifact@v2
       name: Collect and Archive Artifacts
       with:
         name: ${{matrix.version}}-${{matrix.os}}-${{matrix.variant}}
         path: workspace/target/*

     - name: Restore build artifacts
       uses: actions/download-artifact@v2
       with:
         name: ${{matrix.version}}-${{matrix.os}}-${{matrix.variant}}
         path: ~/${{matrix.version}}-${{matrix.os}}-${{matrix.variant}}

     - name: Unpack jdk
       run: |
         unzip "${HOME}/${{matrix.version}}-${{matrix.os}}-${{matrix.variant}}/OpenJDK.zip" -d "${HOME}/${{matrix.version}}-${{matrix.os}}-${{matrix.variant}}"

     - name: Set root of jdk image dir
       shell: pwsh
       run: |
         $imageroot=$(find "${HOME}/${{matrix.version}}-${{matrix.os}}-${{matrix.variant}}" -name release -type f)
         echo "TEST_JDK_HOME=$(dirname "${imageroot}")" | Out-File -FilePath "$env:GITHUB_ENV" -Encoding utf8 -Append
     - name: Smoke test
       uses: adoptium/run-aqa@v1
       with:
         build_list: 'functional/buildAndPackage'
         target: '_extended.functional'
         vendor_testRepos: "${{ github.event.pull_request.head.repo.html_url }}.git"
         vendor_testBranches: "${{ github.head_ref }}"
         vendor_testDirs: "/test/functional"
     - uses: actions/upload-artifact@v2
       name: Collect and Archive SmokeTest Results
       if: failure()
       with:
         name: "${{matrix.version}}-${{matrix.os}}-${{matrix.variant}}_test_output"
         path: ./**/output_*/
